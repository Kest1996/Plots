package main;

public class MatrixXM {
    private double n0, nl;
    private double kl;
    private final int SIZE = 2;

    double[][][] m = new double[SIZE][SIZE][SIZE];

    public MatrixXM(double n0, double nl, double kl) {
        this.n0 = n0;
        this.nl = nl;
        this.kl = kl;
    }

    public double[][][] MatrixXM(double[][][] A, double[][][] B){
        m[0][0][0] = A[0][0][0] * B[0][0][0] - A[0][0][1] * B[0][0][1] - A[0][1][0] * B[1][0][0] + A[0][1][1] * B[1][0][1];
        m[0][1][0] = A[0][0][0] * B[0][1][0] - A[0][0][1] * B[0][1][1] + A[0][1][0] * B[1][1][0] - A[0][1][1] * B[1][1][1];
        m[1][0][0] = A[1][1][0] * B[1][0][0] - A[1][1][1] * B[1][0][1] + A[1][0][0] * B[0][0][0] - A[1][0][1] * B[0][0][1];
        m[1][1][0] = A[1][1][0] * B[1][1][0] - A[1][1][1] * B[1][1][1] - A[1][0][0] * B[0][1][0] + A[1][0][1] * B[0][1][1];
        m[0][0][1] = A[0][0][0] * B[0][0][1] + A[0][0][1] * B[0][0][0] - A[0][1][0] * B[1][0][1] - A[0][1][1] * B[1][0][0];
        m[0][1][1] = A[0][0][0] * B[0][1][1] + A[0][0][1] * B[0][1][0] + A[0][1][0] * B[1][1][1] + A[0][1][1] * B[1][1][0];
        m[1][0][1] = A[1][1][0] * B[1][0][1] + A[1][1][1] * B[1][0][0] + A[1][0][0] * B[0][0][1] + A[1][0][1] * B[0][0][0];
        m[1][1][1] = A[1][1][0] * B[1][1][1] + A[1][1][1] * B[1][1][0] - A[1][0][0] * B[0][1][1] - A[1][0][1] * B[0][1][0];
        return m;
    }

    public double[][][] matrix() {
        double[][][] getm = new double[SIZE][SIZE][SIZE];
        getm[0][0][0] = m[0][0][0];
        getm[0][1][0] = m[0][1][0];
        getm[1][0][0] = m[1][0][0];
        getm[1][1][0] = m[1][1][0];
        getm[0][0][1] = m[0][0][1];
        getm[0][1][1] = m[0][1][1];
        getm[1][0][1] = m[1][0][1];
        getm[1][1][1] = m[1][1][1];
        return getm;
    }

    public double matrixR() {

        double V = n0 * m[0][0][0] + m[1][0][1] - nl * (n0 * m[0][1][1] + m[1][1][0]) + kl * (n0 * m[0][1][0] - m[1][1][1]);
        double Z = n0 * m[0][0][1] - m[1][0][0] + nl * (n0 * m[0][1][0] - m[1][1][1]) + kl * (n0 * m[0][1][1] + m[1][1][0]);
        double X = n0 * m[0][0][0] - m[1][0][1] - nl * (n0 * m[0][1][1] - m[1][1][0]) + kl * (n0 * m[0][1][0] + m[1][1][1]);
        double Y = n0 * m[0][0][1] + m[1][0][0] + nl * (n0 * m[0][1][0] + m[1][1][1]) + kl * (n0 * m[0][1][1] - m[1][1][0]);

        return (V * V + Z * Z) / (X * X + Y * Y);
    }
}
